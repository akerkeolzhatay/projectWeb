<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Management</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="navbar-container">
        <nav class="navbar">
            <ul>
                <li><a href="/home">Home</a></li>
                <li><a href="/qr">QR-code</a></li>
                <li><a href="/nodemailer">Nodemailer</a></li>
                <li><a href="/bmi">BMI</a></li>
                <li><a href="/weather">Weather API</a></li>
                <li><a href="/blog">CRUD</a></li>
            </ul>
        </nav>
        <a href="/" class="logout-button">Log Out</a>
    </div>

<div class="container">
    <h1>üìñ Book Management ü™º</h1>

    <div class="form-section">
        <h2>üìç Add a New Book</h2>
        <form id="book-form">
            <input type="text" id="title" placeholder="Book Title" required>
            <textarea id="body" placeholder="Description" required></textarea>
            <input type="text" id="author" placeholder="Author" required>
            <button type="button" onclick="createBook()" class="submit-btn">Add Book</button>
        </form>
    </div>

    <div class="list-section">
        <h2>üìö All Books üìé</h2>
        <div id="book-list"></div>
    </div>
</div>

<script>
    const apiUrl = 'http://localhost:1212/api/blogs';  

    async function getBooks() {
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
            const data = await response.json();
            
            const booksContainer = document.getElementById('book-list');
            booksContainer.innerHTML = '';

            data.forEach(book => {
                const bookElement = document.createElement('div');
                bookElement.classList.add('book-item');
                bookElement.innerHTML = `
                    <h3>${book.title}</h3>
                    <p>${book.body}</p>
                    <p><strong>Author:</strong> ${book.author}</p>
                    <button class="view-button" onclick="viewBook('${book._id}')">View</button>
                    <button class="edit-button" onclick="editBook('${book._id}')">Edit</button>
                    <button class="delete-button" onclick="deleteBook('${book._id}')">Delete</button>
                `;
                booksContainer.appendChild(bookElement);
            });
        } catch (error) {
            console.error('Error fetching books:', error);
            alert('Error fetching books! Check console.');
        }
    }

    async function createBook() {
        const title = document.getElementById('title').value;
        const body = document.getElementById('body').value;
        const author = document.getElementById('author').value;

        if (!title || !body || !author) {
            alert('Please fill all fields!');
            return;
        }

        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ title, body, author })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            alert('Book added successfully!');
            document.getElementById('book-form').reset();
            getBooks();
        } catch (error) {
            console.error('Error adding book:', error);
            alert('Failed to add book! Check console.');
        }
    }

async function viewBook(id) {
    try {
        const response = await fetch(`${apiUrl}/${id}`);
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

        const book = await response.json();
        alert(`üìñ Title: ${book.title}\n\nüìù Description: ${book.body}\n\nüë§ Author: ${book.author}`);
    } catch (error) {
        console.error('Error viewing book:', error);
        alert('Failed to view book! Check console.');
    }
}

async function editBook(id) {
    const title = prompt('Enter new book title:');
    const body = prompt('Enter new description:');
    const author = prompt('Enter new author:');

    if (!title || !body || !author) {
        alert('Fields cannot be empty!');
        return;
    }

    try {
        const response = await fetch(`${apiUrl}/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ title, body, author })
        });

        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

        alert('Book updated!');
        getBooks();
    } catch (error) {
        console.error('Error editing book:', error);
        alert('Failed to edit book! Check console.');
    }
}

async function deleteBook(id) {
    if (!confirm('Are you sure you want to delete this book?')) return;

    try {
        const response = await fetch(`${apiUrl}/${id}`, { method: 'DELETE' });

        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

        alert('Book deleted!');
        getBooks();
    } catch (error) {
        console.error('Error deleting book:', error);
        alert('Failed to delete book! Check console.');
    }
}


    getBooks();
</script>

</body>
</html>
